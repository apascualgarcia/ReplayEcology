partition=clustering_to_partition(data.dist,Kmax = Kmax,
outputlabel = output.label,
print.file = TRUE)
sample_md$partition = partition
sample_md$`output.label` = partition
View(sample_md)
View(partition)
sample_md[, output.label] = partition[,"PartId"]
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/main_find_classes.R", echo=TRUE)
write.table(sample_md,file = fileOut,sep="\t",quote=F,row.names = F)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/main_find_classes.R", echo=TRUE)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/main_find_classes.R", echo=TRUE)
# ... double check that is ordered as the ASV table
matched = match(rownames(ASV.table, names(data.dist)))
# ... double check that is ordered as the ASV table
matched = match(rownames(ASV.table), names(data.dist)))
# ... double check that is ordered as the ASV table
matched = match(rownames(ASV.table), names(data.dist))
which(is.na(matched))
#which(is.na(matched))  # none
plot(matched)
#which(is.na(matched))  # none
plot(matched)
#which(is.na(matched))  # none
dim(as.matrix(data.dist))
data.dist.tmp=as.dist(as.matrix(data.dist)[matched, matched])
data.dist = data.dist.tmp # same here
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/main_find_classes.R", echo=TRUE)
dim(ASV.table)
dim(as.matrix(data.dist))
setwd("../7.1_classes")
fileDist="Dist_JSD_Time0D-7D-4M.RDS"
data.dist=readRDS(fileDist)
#which(is.na(matched))  # none
dim(as.matrix(data.dist)) # 4 more elements
# ... double check that is ordered as the ASV table
matched = match(rownames(ASV.table), names(data.dist))
data.dist.tmp=as.dist(as.matrix(data.dist)[matched, matched])
data.dist = data.dist.tmp # same here
dim(as.matrix(data.dist)) # 4 more elements
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/main_find_classes.R", echo=TRUE)
rm(list=ls())
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
dirSrc=paste(this.dir,"/src/",sep="") # Directory where the code is
setwd(dirSrc)
setwd("../7.1_classes")
fileIn1 = "metadata_Time0D-7D-4M_May2022_wJSDpart-split.csv"
sample_md1 = read.table(fileIn1,sep="\t") # this will be the reference
fileIn2 = "metadata_Time0D-7D-4M_May2022_Time0D-7D-4M_wJSDpart-all.csv"
sample_md2 = read.table(fileIn2,sep="\t")
fileIn3 = "metadata_Time0D-7D-4M_May2022_Time0D-7D_wJSDpart-all.csv"
sample_md3 = read.table(fileIn3, sep="\t")
fileIn4 = "metadata_Time0D-7D-4M_May2022_Time0D-7D-matched_wJSDpart-all.csv"
sample_md4 = read.table(fileIn4, sep="\t")
fileOut = "metadata_Time0D-7D-4M_May2022_wJSDpart-merged.csv"
sample_md1[, "Part_Time0D-7D-4M"] = NA
sample_md1[, "Part_Time0D-7D"] = NA
sample_md1[, "Part_Time0D-7D-matched"] = NA
fileIn1 = "metadata_Time0D-7D-4M_May2022_wJSDpart-split.csv"
sample_md1 = read.table(fileIn1, sep="\t", header = T) # this will be the reference
View(sample_md1)
?merge
fileIn2 = "metadata_Time0D-7D-4M_May2022_Time0D-7D-4M_wJSDpart-all.csv"
sample_md2 = read.table(fileIn2,sep="\t", header = T)
fileIn3 = "metadata_Time0D-7D-4M_May2022_Time0D-7D_wJSDpart-all.csv"
sample_md3 = read.table(fileIn3, sep="\t", header = T)
fileIn4 = "metadata_Time0D-7D-4M_May2022_Time0D-7D-matched_wJSDpart-all.csv"
sample_md4 = read.table(fileIn4, sep="\t", header = T)
fileOut = "metadata_Time0D-7D-4M_May2022_wJSDpart-merged.csv"
sample_md = merge(sample_md1, sample_md2, all.x = T)
View(sample_md)
View(sample_md1)
View(sample_md2)
sample_md = merge(sample_md, sample_md3, all.x = T)
sample_md = merge(sample_md, sample_md4, all.x = T)
# Write output -----
write.table(sample_md, file = fileOut, sep = "\t", quote = F)
# Check differences between partitions
part_diff = sample_md$Part_Time7D_rep1_2 - sample_md$Time0D.7D.matched)
# Check differences between partitions
part_diff = sample_md$Part_Time7D_rep1_2 - sample_md$Time0D.7D.matched
plot(part_diff[!is.na(part.diff)])
plot(part_diff[!is.na(part_diff)])
part_diff = part_diff[!is.na(part_diff)])
part_diff = part_diff[!is.na(part_diff)]
length(part_diff = 1)
length(part_diff == 1)
length(which(part_diff == 1))
length(which(part_diff == -1))
part_diff = sample_md$Part_Time7D_rep2_2 - sample_md$Time0D.7D.matched
part_diff = part_diff[!is.na(part_diff)]
length(which(part_diff == 1)) # 15
length(which(part_diff == -1)) # 15
part_diff = sample_md$Part_Time7D_rep3_2 - sample_md$Time0D.7D.matched
part_diff = part_diff[!is.na(part_diff)]
length(which(part_diff == 1)) # 15
length(which(part_diff == -1)) # 15
part_diff = sample_md$Part_Time7D_rep4_2 - sample_md$Time0D.7D.matched
part_diff = part_diff[!is.na(part_diff)]
length(which(part_diff == 1)) # 15
length(which(part_diff == -1)) # 15
# phyloseq_analysis.R
##################################################
# In this script I perform the typical pipeline of phyloseq analysis, to
# study phylogenetic distributions of taxa in the different samples, alpha diversity
# quantification, and dimensionality reduction, for treeholes samples.
#
# ZÃ¼rich, August 2022
# Theoretical Biology, ETH
# apascualgarcia.github.io
###################################################
rm(list=ls())
library(phyloseq)
library(reshape2)
#library(RDPutils)
library(ggplot2)
library(usedist)
library(plyr)
# START EDITING -----------
# --- Set the files needed
file.meta = "metadata_Time0D-7D-4M_May2022_wJSDpart-merged.csv" # metadata with partitions
file.meta.out = "metadata_Time0D-7D-4M_May2022_wJSDpart-merged_ext.csv" # new metadata with combinations of columns
fileOTU = "seqtable_readyforanalysis.csv" # ASVs table
fileTaxonomy = "taxa_wsp_readyforanalysis.csv" # taxonomy
fileDist = "Dist_JSD_Time0D-7D-4M.RDS" # beta diversity distance
# select if matched or total dataset, will be processed below
set="matched" #"matched" # or all
# select how points in the pcoa will be differentiated
colorby="Time0D-7D-matched" # "exp.partition" # "partition" "parent" "Location" replicate.partition
# --- Set the main directory
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
dirSrc=paste(this.dir,"/src/",sep="") # Directory where the code is
#dirSrc=here::here() # src of the repository
setwd(dirSrc)
#  --- Load metadata
setwd("../7.1_classes")
sample_metadata <- import_qiime_sample_data(file.meta) #read.table(file.meta,sep="\t",header=TRUE)
sample_metadata$replicate = as.factor(paste("Rep",sample_metadata$replicate,sep=""))
sample_metadata$partition = as.factor(paste("Class",sample_metadata$partition,sep=""))
sample_metadata$replicate.partition = as.factor(paste(sample_metadata$replicate,
".",sample_metadata$partition,sep=""))
View(sample_metadata)
sample_metadata <- import_qiime_sample_data(file.meta) #read.table(file.meta,sep="\t",header=TRUE)
sample_metadata$replicate = as.factor(paste("Rep",sample_metadata$replicate,sep=""))
sample_metadata$partition = as.factor(paste("Class",sample_metadata$partition,sep=""))
sample_metadata$replicate.partition = as.factor(paste(sample_metadata$replicate,
".",sample_metadata$partition,sep=""))
experiments = unique(sample_metadata$Experiment)
sample_metadata$ExpCompact = NA
for(exp in experiments){
id = which(sample_metadata$Experiment == exp)
if(exp == "4M"){
sample_metadata$ExpCompact[id] = "Evolved"
}else if(exp == "0D"){
sample_metadata$ExpCompact[id] = "Starting"
}else{
sample_metadata$ExpCompact[id] = "Final"
}
}
sample_metadata$exp.replicate.partition=as.factor(paste(sample_metadata$ExpCompact,".",sample_metadata$replicate.partition,sep=""))
sample_metadata$exp.partition=as.factor(paste(sample_metadata$ExpCompact,".",sample_metadata$partition,sep=""))
write.table(sample_metadata,file = file.meta.out,sep="\t",quote=F,row.names = F) # overwrite old metadata
setwd("../6_finalfiles")
otu.in=read.table(fileOTU,sep="\t")
otu.in.t=t(otu.in)
#fileOut="seqtable_readyforanalysis.t.csv"
#write.table(otu.in.t,file=fileOut,sep="\t",quote=FALSE)
dim(otu.in)
otu.in=as.matrix(otu.in)
head(otu.in)[1:5,1:5]
# --- Remove samples with less than 10K
otu.in = otu.in[which(rowSums(otu.in) >= 10000), ]
dim(otu.in)
otu.pseq=otu_table(as.matrix(otu.in), taxa_are_rows = FALSE)
# --- Load taxonomy
taxonomy=read.table(fileTaxonomy,sep="\t",row.names = 1,header=TRUE)
tax.pseq = tax_table(as.matrix(taxonomy))
# --- Finally build the phyloseq object
treeholes=merge_phyloseq(otu.pseq,sample_metadata,tax.pseq) # If all dataset
# Rarefaction ---------
# --- Create some plots for the minimum acceptable level of rarefaction
set.seed(15082022) # Today's date 15/08/2022. Stored for reproducibility
otu.pseq.rar = rarefy_even_depth(otu.pseq, sample.size = 10000) # 10k is the minimum sampling sites, and the alpha diversity pattern is already there
#otu.pseq.rar = otu.pseq.rar[,which(colSums(otu.pseq.rar)!=0)]
#plot(colSums(otu.pseq.rar))
treeholes.rar=merge_phyloseq(otu.pseq.rar,sample_metadata,tax.pseq)
# Prune undesired samples -----
exclude="4M"
treeholes.rar=prune_samples(treeholes.rar@sam_data$Experiment != exclude, treeholes.rar)
# select now matched or all dataset
if(set == "all"){
labelOut=set
}else{
# ......These are only those matched and their replicas
# APG The commented lines should be rewritten if matched samples are considered
samples_list = treeholes.rar@sam_data$sampleid
parents_list = treeholes.rar@sam_data$parent
ntimes = count(parents_list)
length(which(ntimes$freq == 5)) # 275
parents_list_true = as.character(ntimes$x[ntimes$freq == 5])
matched = match(parents_list, parents_list_true)
keep.samples = as.character(samples_list[!is.na(matched)])
#matched=match(treeholes.rar@sam_data$parent,Part.SJD.matched0$V1) # look those for those that have no match in a matched partition
#keep.samples=!is.na(matched) # create a logical vector that will say true if the sample is to be kept
#length(which(keep.samples==TRUE))
treeholes.rar.matched=prune_samples(keep.samples, treeholes.rar)
#print(set)
labelOut=set
treeholes.rar=treeholes.rar.matched
}
# Top Taxa ---------------
# --- Identify the top Ntop genus and families for each replica among all its samples
#         (the Ntop+1 will be the remainder, labeled "others")
Ntop=20
lev.rep=as.list(levels(treeholes.rar@sam_data$replicate))
Nrep=length(lev.rep)
topESVs=c()
for (i in 1:Nrep){ # The top 15 in all replicates, and merge them together
#rep=as.character(lev.rep[i])
topTmp=names(sort(taxa_sums(subset_samples(treeholes.rar, replicate==lev.rep[[i]])), TRUE)[1:Ntop])
topESVs=c(topESVs,topTmp)
}
topESVs=unique(topESVs)
taxTop = cbind(tax_table(treeholes.rar), family = NA, genus=NA,
OTUs=NA,ASV_genera=NA,ASV_genera_order=NA) #species = "other species")
# I get an error in this line about the memory used, it may be a bug in the usage of tax_table, it happens
taxTop[topESVs, "family"] <- as(tax_table(treeholes.rar)[topESVs, "Family"], "character") # It happens when as.character is used
taxTop[topESVs, "genus"] <- as(tax_table(treeholes.rar)[topESVs, "Genus"],  "character") # solved updating packages in branca
taxTop[topESVs, "OTUs"] <- as(tax_table(treeholes.rar)[topESVs, "Species"],  "character")
taxTop[topESVs, "ASV_genera"]  <- as(paste(topESVs,
tax_table(treeholes.rar)[topESVs, "Genus"],sep="_"),
"character")
taxTop[topESVs, "ASV_genera_order"]  <- as(paste(topESVs,
tax_table(treeholes.rar)[topESVs, "Genus"],
tax_table(treeholes.rar)[topESVs, "Order"],sep=" / "),
"character")
id.ANPR=grep("Allorhizobium",taxTop[,"ASV_genera_order"])
if(length(id.ANPR)>0){ # If the ANPR clade is in the list, we want to change the name
strtmp=taxTop[id.ANPR,"ASV_genera_order"]
strtmpsplit=unlist(strsplit(strtmp,split = "/",fixed = TRUE))
newstr=paste(strtmpsplit[1],"ANRP clade",strtmpsplit[3],sep=" / ")
taxTop[id.ANPR,"ASV_genera_order"]=newstr
}
tax_table(treeholes.rar) <- tax_table(taxTop)
rownames(tax_table(treeholes.rar))[1:5]
# Merge samples ------------
# Merge samples belonging to the same replica
treeholes.rar.byRep =merge_samples(treeholes.rar, "replicate")
sample_data(treeholes.rar.byRep)$replicate <- levels(sample_data(treeholes.rar)$replicate)
treeholes.rar.byRep = transform_sample_counts(treeholes.rar.byRep, function(x) 100 * x/sum(x))
# Same by partitions
treeholes.rar.byPar =merge_samples(treeholes.rar, "replicate.partition")
sample_data(treeholes.rar.byPar)$replicate.partition <- levels(sample_data(treeholes.rar)$replicate.partition)
treeholes.rar.byPar = transform_sample_counts(treeholes.rar.byPar, function(x) 100 * x/sum(x))
# Same without normalization to plot species
treeholes.rar.byParSp =merge_samples(treeholes.rar, "replicate.partition")
sample_data(treeholes.rar.byParSp)$replicate.partition <- levels(sample_data(treeholes.rar)$replicate.partition)
# .... abundances per replicate
treeholes.rar.byRep.19 = prune_taxa(topESVs, treeholes.rar.byRep)
treeholes.rar.byPar.19 = prune_taxa(topESVs, treeholes.rar.byPar)
# Plot palette ---------------------------
setwd("../7.3_phyloseq")
# phyloseq_analysis.R
##################################################
# In this script I perform the typical pipeline of phyloseq analysis, to
# study phylogenetic distributions of taxa in the different samples, alpha diversity
# quantification, and dimensionality reduction, for treeholes samples.
#
# ZÃ¼rich, August 2022
# Theoretical Biology, ETH
# apascualgarcia.github.io
###################################################
rm(list=ls())
library(phyloseq)
library(reshape2)
#library(RDPutils)
library(ggplot2)
library(usedist)
library(plyr)
# START EDITING -----------
# --- Set the files needed
file.meta = "metadata_Time0D-7D-4M_May2022_wJSDpart-merged.csv" # metadata with partitions
file.meta.out = "metadata_Time0D-7D-4M_May2022_wJSDpart-merged_ext.csv" # new metadata with combinations of columns
fileOTU = "seqtable_readyforanalysis.csv" # ASVs table
fileTaxonomy = "taxa_wsp_readyforanalysis.csv" # taxonomy
fileDist = "Dist_JSD_Time0D-7D-4M.RDS" # beta diversity distance
# select if matched or total dataset, will be processed below
set="matched" #"matched" # or all
# select how points in the pcoa will be differentiated
colorby="Time0D-7D-matched" # "exp.partition" # "partition" "parent" "Location" replicate.partition
# select the name of the partition to create the barplots
sel_partition = "Time0D-7D-matched" # defaults to "partition"
# --- Set the main directory
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
dirSrc=paste(this.dir,"/src/",sep="") # Directory where the code is
#dirSrc=here::here() # src of the repository
setwd(dirSrc)
#  --- Load metadata
setwd("../7.1_classes")
sample_metadata <- import_qiime_sample_data(file.meta) #read.table(file.meta,sep="\t",header=TRUE)
sample_metadata$replicate = as.factor(paste("Rep",sample_metadata$replicate,sep=""))
sample_metadata$partition = as.factor(paste("Class",sample_metadata[, sel_partition],sep=""))
sample_metadata$replicate.partition = as.factor(paste(sample_metadata$replicate,
".",sample_metadata$partition,sep=""))
# select how points in the pcoa will be differentiated
colorby="Time0D.7D.matched" # "exp.partition" # "partition" "parent" "Location" replicate.partition
# select the name of the partition to create the barplots
sel_partition = "Time0D.7D.matched" # defaults to "partition"
# --- Set the main directory
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
dirSrc=paste(this.dir,"/src/",sep="") # Directory where the code is
#dirSrc=here::here() # src of the repository
setwd(dirSrc)
#  --- Load metadata
setwd("../7.1_classes")
sample_metadata <- import_qiime_sample_data(file.meta) #read.table(file.meta,sep="\t",header=TRUE)
sample_metadata$replicate = as.factor(paste("Rep",sample_metadata$replicate,sep=""))
sample_metadata$partition = as.factor(paste("Class",sample_metadata[, sel_partition],sep=""))
sample_metadata$replicate.partition = as.factor(paste(sample_metadata$replicate,
".",sample_metadata$partition,sep=""))
sel_partition
sample_metadata[1:3, sel_partition]
sample_metadata$`sel_partition`[1:3]
sample_metadata$"sel_partition"[1:3]
dirSrc=paste(this.dir,"/src/",sep="") # Directory where the code is
#dirSrc=here::here() # src of the repository
setwd(dirSrc)
#  --- Load metadata
setwd("../7.1_classes")
sample_metadata <- import_qiime_sample_data(file.meta) #read.table(file.meta,sep="\t",header=TRUE)
sample_metadata$partition = sample_metadata[, sel_partition]
str(sample_metadata[, sel_partition])
sample_variables(sample_metadata)
sel_partition
sample_metadata$partition = as.vector(sample_metadata[, sel_partition])
sample_metadata[, sel_partition]
sample_metadata <- import_qiime_sample_data(file.meta) #read.table(file.meta,sep="\t",header=TRUE)
sample_metadata$partition = sample_metadata[, sel_partition]
sample_metadata[, "partition"] = sample_metadata[, sel_partition]
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/phyloseq_analysis.R", echo=TRUE)
levels(sample_metadata$partition)
# the factor selected will override "partition"
# select how points in the pcoa will be differentiated
colorby="partition" # "exp.partition" # "partition" "parent" "Location" replicate.partition
col_vector = c("deepskyblue1","green4","red","green","cyan","grey50","gold","black")
#col_vector2 = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
#col_vector2 = c(brewer.pal(4,"Set2"),brewer.pal(4,"Dark2"))
col_vector2 = c(brewer.pal(6,"Spectral"),brewer.pal(4,"Accent"), brewer.pal(4,"Paired"),brewer.pal(4,"Dark2")) # Select manually
#col_vector2=col_vector[c(1:5,7:length(col_vector))] # Select between the list jumping
#col_vector2[4]="cyan"
#col_vector2=col_vector[seq(from=1,to=length(col_vector),by=2)] # Select between the list jumping
col_vector = c(col_vector,col_vector2)
# Plot bars biodiversity---------
plotTitle=paste0("BarPlot_diversity-replicates_",selected,"_Par",sel_partition,"_byGenus.pdf") # All samples
tmp.data.frame=psmelt(treeholes.rar.byPar) # this is the dataframe that the function plot_bar creates internally,
# and then it selects the column to plot and hence the label, I
# create a vector from that to add NA as a factor
species.vec=tmp.data.frame$ASV_genera_order # get the vector that will lead to the bars and the labels
#genus.vec=tmp.data.frame$genus
species.vec=addNA(species.vec) # add NA as a factor
#genus.vec=addNA(genus.vec)
levels(species.vec)=c(levels(species.vec),"other") # Add the new name, now other is at the end
#levels(genus.vec)=c(levels(genus.vec),"other")
newlabels=levels(species.vec)
pdf(file=plotTitle,width=18,height=10)
title = " "
#plot_bar(treeholes.rar.byRep,"replicate",fill="OTUs",title=title)+
plot_bar(treeholes.rar.byRep,"replicate",fill="ASV_genera_order",title=title)+
ylab("Relative abundance (%)")+coord_flip()+
scale_fill_manual(values = col_vector,labels=newlabels)+
theme(axis.title = element_text(size=18),
title=element_text(size=16),
axis.text=element_text(size=15),
strip.text=element_text(size=18),
legend.title = element_text(size=18),
legend.text=element_text(size=14))
length(col_vector)
length(qual_col_pals)
qual_col_pals
col_vector = c("deepskyblue1","green4","red","green","cyan","grey50","gold","black")
#col_vector2 = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
#col_vector2 = c(brewer.pal(4,"Set2"),brewer.pal(4,"Dark2"))
col_vector2 = c(brewer.pal(6,"Spectral"),brewer.pal(4,"Accent"), brewer.pal(12,"Paired"),
brewer.pal(8,"Set2"),brewer.pal(8,"Dark2")) # Select manually
#col_vector2=col_vector[c(1:5,7:length(col_vector))] # Select between the list jumping
#col_vector2[4]="cyan"
#col_vector2=col_vector[seq(from=1,to=length(col_vector),by=2)] # Select between the list jumping
col_vector = c(col_vector,col_vector2)
pdf(file=plotTitle,width=18,height=10)
title = " "
#plot_bar(treeholes.rar.byRep,"replicate",fill="OTUs",title=title)+
plot_bar(treeholes.rar.byRep,"replicate",fill="ASV_genera_order",title=title)+
ylab("Relative abundance (%)")+coord_flip()+
scale_fill_manual(values = col_vector,labels=newlabels)+
theme(axis.title = element_text(size=18),
title=element_text(size=16),
axis.text=element_text(size=15),
strip.text=element_text(size=18),
legend.title = element_text(size=18),
legend.text=element_text(size=14))
dev.off()
dev.off()
dev.off()
dev.off()
getwd)
getwd()
pdf(file=plotTitle,width=18,height=10)
title = " "
#plot_bar(treeholes.rar.byRep,"replicate",fill="OTUs",title=title)+
plot_bar(treeholes.rar.byRep,"replicate",fill="ASV_genera_order",title=title)+
ylab("Relative abundance (%)")+coord_flip()+
scale_fill_manual(values = col_vector,labels=newlabels)+
theme(axis.title = element_text(size=18),
title=element_text(size=16),
axis.text=element_text(size=15),
strip.text=element_text(size=18),
legend.title = element_text(size=18),
legend.text=element_text(size=14))
dev.off()
# --- By partition
#plotTitle=paste("BarPlot_diversity-partitions_",selected,"_",labelOut,"Time0restrictPar_bySpecies.pdf",sep="")
plotTitle=paste0("BarPlot_diversity-partitions_",selected,"_Par",sel_partition,"_byGenus.pdf")
tmp.data.frame=psmelt(treeholes.rar.byRep) # this is the dataframe that the function plot_bar creates internally,
# and then it selects the column to plot and hence the label, I was tryinng to create a vector out of that to change NA
species.vec=tmp.data.frame$ASV_genera_order # get the vector that will lead to the bars and the labels
species.vec=addNA(species.vec) # add NA as a factor
levels(species.vec)=c(levels(species.vec),"Other") # Add the new name, now other is at the end
newlabels=levels(species.vec)
pdf(file=plotTitle,width=18,height=10)
title = " "
plot_bar(treeholes.rar.byPar,"replicate.partition",fill="ASV_genera_order",title=title)+ #,facet_grid=~partition)+
ylab("Relative abundance (%)")+
labs(fill = "ASV id. / Genera / Order")+
scale_fill_manual(values = col_vector,labels=newlabels)+coord_flip()+
theme(axis.title = element_text(size=18),
title=element_text(size=16),
axis.text=element_text(size=15),
strip.text=element_text(size=18),
legend.title = element_text(size=18),
legend.text=element_text(size=14))
dev.off()
# Ordination analysis ----------
# .... Select method, distance was read from file
method="PCoA"
dist="jsd"
# .... These are all # (or matched, depending on your choice)
#treeholes.ord = ordinate(treeholes.rar, method=method,distance=dist) #dist.rar)#, "unifrac") # takes more than 1h for JSD
fileOrd=paste0("Ordination_jsd_PCoA",selected,".RDS")
#saveRDS(treeholes.ord,file=fileOrd)
treeholes.ord=readRDS(fileOrd)
# ......These are only time 0
treeholes.rar.time0=subset_samples(treeholes.rar,replicate=="Rep0")
if(colorby=="partition"){
usecolor=colorCodes
colorlab="Class"
}else{
if(colorby == "replicate.partition"){
colorlab="Replicate / Class"
}else if(colorby == "Location"){
colorlab="Location"
}else if(colorby == "exp.partition"){
colorlab="Experiment / Class"
}
usecolor=col_vector
}
# ... prepare labels
labfacets=c("Starting communities","Final, Replicate 1","Final, Replicate 2",
"Final, Replicate 3","Final, Replicate 4")
names(labfacets)=c("Rep0","Rep1","Rep2","Rep3","Rep4")
axesby=c(1,2)
labaxes="Axes1-1"
explainX = round(treeholes.ord$values[axesby[1],2] * 100, digits = 2)
explainY = round(treeholes.ord$values[axesby[2],2]* 100, digits = 2)
xlab = paste0("PCoA, component ", axesby[1]," [",explainX,"%]")
ylab = paste0("PCoA, component ", axesby[2]," [",explainY,"%]")
# ... prepare plot
plotTitle=paste("Plot",method,"_",dist,"_Par",sel_partition,"_By",colorby,"_",labelOut,"_",labaxes,".pdf",sep="")
pdf(file=plotTitle,width=22,height=6)
title=paste(method," of ",dist," distance",sep="")
treeholes.ord$vectors[, "Axis.2"] = -1*treeholes.ord$vectors[, "Axis.2"]
# ... plot
p = plot_ordination(treeholes.rar, treeholes.ord, color = colorby,
axes=axesby) #,label="parent")#,shape="partition")
p = p + geom_point(size = 4.0, alpha = 0.7) + ggtitle(title)+
labs(color = colorlab)+xlab(xlab)+ylab(ylab)+
theme_bw()+
theme(axis.title = element_text(size=24),
title=element_blank(), #element_text(size=16),
axis.text=element_text(size=20),
strip.text=element_text(size=22),
legend.title = element_text(size=22),
legend.text=element_text(size=20))
p + facet_wrap(~replicate,nrow=1,ncol=5,
labeller=labeller(replicate=labfacets))+
scale_color_manual(values = usecolor) #scale_color_hue()# scale_color_brewer(palette="Accent")
dev.off()
rm(list=ls())
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
dirSrc=paste(this.dir,"/src/",sep="") # Directory where the code is
setwd(dirSrc)
setwd("../7.1_classes")
fileIn1 = "metadata_Time0D-7D-4M_May2022_wJSDpart-split.csv"
sample_md1 = read.table(fileIn1, sep="\t", header = T) # this will be the reference
fileIn2 = "metadata_Time0D-7D-4M_May2022_Time0D-7D-4M_wJSDpart-all.csv"
sample_md2 = read.table(fileIn2,sep="\t", header = T)
fileIn3 = "metadata_Time0D-7D-4M_May2022_Time0D-7D_wJSDpart-all.csv"
sample_md3 = read.table(fileIn3, sep="\t", header = T)
fileIn4 = "metadata_Time0D-7D-4M_May2022_Time0D-7D-matched_wJSDpart-all.csv"
sample_md4 = read.table(fileIn4, sep="\t", header = T)
fileOut = "metadata_Time0D-7D-4M_May2022_wJSDpart-merged.csv"
sample_md = merge(sample_md1, sample_md2, all.x = T)
View(sample_md)
