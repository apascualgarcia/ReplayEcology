features.list = extract_dist_vec_feat(dist.vec.tmp, "ToC")
dist.vec = features.list$dist.vec
char.vec = features.list$char.vec
dist.vec = c(dist.vec.tmp, dist.vec)
dist.df.tmp = as.data.frame(t(dist.vec))
char.df.tmp = as.data.frame(t(char.vec))
all.df.tmp = cbind(sample, dist.df.tmp, char.df.tmp)
# ... Second, compute the distance against the subset
nchild = 0
nchild_min = 0
for(k in 2:length(ASV.sub.rel.list)){ # for each subset
ASV.sub.tmp = ASV.sub.rel.list[[k]]
dist.vec.tmp = vector("numeric", length = dim(ASV.sub.tmp)[1]) # reinitialize
key_par = F
for(u in 1:dim(ASV.sub.tmp)[1]){ # compare "sample" against all the communities in the subset
sample_sub = row.names(ASV.sub.tmp)[u]
id.s.sub = which(sample_md$sampleid == sample_sub)
sample_par = as.character(sample_md$parent[id.s.sub])
s1 = ASV.ref.relAb[i, ]
s2 = ASV.sub.tmp[u, ]
JSD.tmp = JSD(s1, s2)
if(JSD.tmp == 0){ # control that there are not weird possibilities
idtcl.df.tmp = rbind(s1, s2)
rownames(idtcl.df.tmp) = c(sample, sample_sub)
if(key_zero == T){
idtcl.df = idtcl.df.tmp
key_zero = F
}else{
idtcl.df = rbind(idtcl.df, idtcl.df.tmp)
}
mes = "identical samples found --> inspect idtcl.df for details"
warning(mes)
}
if(sample == sample_par){ # control that comparison with own daughters is not included
u_par = u
key_par = T
} # skip comparison against its own daughters
dist.vec.tmp[u] = JSD.tmp
}
# ... check if a child community was the closest
id.max = which.max(dist.vec.tmp)
if(key_par == T){ # if a daughter community is found
nchild = nchild + 1 # count that it exist
if(id.max  == u_par){ # check if it was the one with minimum distance
nchild_min = nchild_min + 1 # count how many child have the min dist
dist.vec.tmp[u_par] = NA # remove from further computation
}
}
names(dist.vec.tmp) = rownames(ASV.sub.tmp)
label = paste0("ToBdC",level.vec.subsets[k])
features.list = extract_dist_vec_feat(dist.vec.tmp, label = label)
dist.vec = features.list$dist.vec
char.vec = features.list$char.vec
dist.df.tmp = as.data.frame(t(dist.vec))
char.df.tmp = as.data.frame(t(char.vec))
all.df.tmp = cbind(all.df.tmp, dist.df.tmp, char.df.tmp)
}
# ... Look for the closest border
minDistToBd.vec = grep("minDistToBd",colnames(all.df.tmp))
minDistToBd = min(all.df.tmp[, minDistToBd.vec])
id.class.minDistToBd = which.min(all.df.tmp[, minDistToBd.vec])
id.DminToBd.vec = grep("id.DminToBd",colnames(all.df.tmp))
id.minDistToBd = all.df.tmp[,id.DminToBd.vec[id.class.minDistToBd]]
id.class.minDistToBd = paste0("C",id.class.minDistToBd)
# ... Look for the furthest border among the closest ones
maxDistToBd = max(all.df.tmp[, minDistToBd.vec])
id.class.maxDistToBd = which.max(all.df.tmp[, minDistToBd.vec])
id.DmaxToBd.vec = grep("id.DmaxToBd",colnames(all.df.tmp))
id.maxDistToBd = all.df.tmp[,id.DmaxToBd.vec[id.class.maxDistToBd]]
id.class.maxDistToBd = paste0("C",id.class.maxDistToBd)
# ... compute other metrics
meanDistToBd  = (maxDistToBd + minDistToBd) /2
diffDistToBd = maxDistToBd - minDistToBd
diffRelDistToBd = diffDistToBd / minDistToBd
# ... final wrap up
df.bd = data.frame(maxDistToBd, minDistToBd, meanDistToBd,
diffDistToBd, diffRelDistToBd)
df.bd.id = data.frame(id.minDistToBd, id.maxDistToBd,
id.class.minDistToBd, id.class.maxDistToBd)
rownames(df.bd.id) = NULL
all.df.tmp = cbind(all.df.tmp, df.bd, df.bd.id)
if(i == 1){
dist.df = all.df.tmp
}else{
dist.df = rbind(dist.df, all.df.tmp)
}
}
# Report the number of times a child sample was the minimum
mes = paste0("The number of times where the minimum distance is found at the child was ", nchild_min,
"out of ", nchild)
cat(mes)
key_par
u_par
id.max
nchild
u_par
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/dist_to_attractor.R", echo=TRUE)
# ......look for columns of interest
id.id = grep("id.*min.*", colnames(dist.df),perl = T,)
id.id = c(id.id, length(colnames(dist.df)))
dist.df.ids = dist.df[, id.id]
dist.df.tie.ids = dist.df.tie[, id.id]
# Write output --------
# .... convert centroids in df
setwd(dirOut)
label_ref = level.vec.subsets[1]
label_subsets = c()
for(i in 2:length(level.vec.subsets)){
label_subsets = paste0(label_subsets,"_",level.vec.subsets[i])
}
fileSummary = paste0("Distances_from",
label_ref,"_to",label_subsets,".tsv")
fileCentroid = paste0("ASV_table_centroids",label_subsets,".tsv")
write.table(df.centroids, fileCentroid, sep = "\t", quote = F)
write.table(dist.df, fileSummary, sep = "\t", quote = F, row.names = F)
# Plot results ---------
#dist.df[] <- lapply(dist.df, function(x) if(is.factor(x)) as.numeric(x)
#               else x)
dist.df$Class = as.factor(dist.df$Class)
for(i in 1:length(colnames(dist.df))){
check.class = class(dist.df[, i])
if(check.class == "numeric"){
varx = colnames(dist.df)[i]
file.plot = paste0("Plot_",varx,"_VS_NsameClass",label_subsets,".pdf")
pdf(file.plot, width = 6, height = 6)
gg = ggplot(dist.df, aes_string(x = varx,
y = "Nsame.class",
color = "Class",
shape = "id.DminToC"))+
geom_point() +
#geom_jitter()+
geom_smooth()
print(gg)
dev.off()
}
}
u_par
nchild
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/dist_to_attractor.R", echo=TRUE)
sample
sample_sub
sample_par
u_par
i
sample_par
nchild
u
debugSource("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/dist_to_attractor.R", echo=TRUE)
u
update.formula()
u_par
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/dist_to_attractor.R", echo=TRUE)
mes
sort(dist.vec.tmp)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/dist_to_attractor.R", echo=TRUE)
sort_dist
name_child
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/dist_to_attractor.R", echo=TRUE)
rank_child
rank_child[which(rank_child != 0)]
quantile(rank_child[which(rank_child != 0)])
nchild_min = length(which(rank_child == 1))
q = quantile(rank_child, c(0,0.05,0.25,0.5,0.75,0.95,1))
mes = paste0("The number of times where the minimum distance is found at the child was ", nchild_min,
"out of ", nchild, " (",nchild_min/nchild*100,"%)")
cat(mes)
mes2 = paste0("The ranking quantiles are: ",q)
cat(mes2)
q = quantile(rank_child, probs = c(0,0.05,0.25,0.5,0.75,0.95,1))
mes2 = paste0("The ranking quantiles are: ",q)
cat(mes2)
q
# Report the number of times a child sample was the minimum
rank_child = rank_child[which(rank_child != 0)]
nchild_min = length(which(rank_child == 1))
q = quantile(rank_child, probs = c(0,0.05,0.25,0.5,0.75,0.95,1))
q
mes2 = paste0("The ranking quantiles are: ")
cat(mes2)
cat(q)
(q)
(q/nchild)
(q/nchild*100)
View(dist.df.tie)
View(dist.df.tie.ids)
View(dist.df.ids)
plot(s1,s2)
plot(log(s1+0.001),log(s2+0.001))
rowsum(ASV.sub.rel.tmp)[1:5]
rowSums(ASV.sub.rel.tmp)[1:5]
colSums(ASV.sub.rel.tmp)[1:5]
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/dist_to_attractor.R", echo=TRUE)
colnames(dist.df)
varx="meanDistToBd"
vary="meanDistToC"
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC"))+
geom_point() +
#geom_jitter()+
geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
geom_point() +
#geom_jitter()+
geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
geom_point() +
#geom_jitter()+
#geom_smooth()
print(gg)
unique(dist.df$Nsame.class)
class(dist.df$Nsame.class)
gg = ggplot(dist.df, aes_string(x = varx,
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes(color = "Class",
shape = "id.DminToC",
size = "Nsame.class")) +
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
geom_point()
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC",
size = "Nsame.class",
alpha = 0.5))+
geom_point()
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC",
size = "Nsame.class"),
alpha = 0.5)+
geom_point()
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
geom_point(alpha=0.5)
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
geom_point()+
+scale_size_manual(values=c(2,4,6))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))#+
#scale_size_manual(values=c(2,4,6))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
scale_size_manual(values=c(1,2,3))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
scale_size_discrete(values=c(1,2,3))
#geom_jitter()+
#geom_smooth()
print(gg)
#class(dist.df$Nsame.class) # integer, convert to factor to control better
dist.df$Nsame.class = as.factor(dist.df$Nsame.class)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
scale_size_discrete(values=c(1,2,3))
#geom_jitter()+
#geom_smooth()
print(gg)
class(dist.df$Nsame.class) # integer, convert to factor to control better
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))#+
#scale_size_discrete(values=c(1,2,3))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class")) +
scale_size_manual(values=c("2" = 1,"3" = 2,"4" = 3))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"),alpha = 0.5) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class",
alpha = "0.5")) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary),alpha = 0.5)+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class")) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class",
alpha = "alpha")) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
alpha = 0.5
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class",
alpha = "alpha")) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
geom_point(alpha = alpha) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary,
color = "Class",
shape = "id.DminToC",
size = "Nsame.class"))+
geom_point() +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes(color = Class,
shape = id.DminToC,
size = Nsame.class),
alpha = alpha) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"),alpha = alpha) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
pdf(file.plot, width = 6, height = 6)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"),alpha = alpha) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
dev.off()
setwd()
getwd()
dev.off()
file.plot = paste0("Plot_",varx,"_VS_",vary,label_subsets,".pdf")
pdf(file.plot, width = 6, height = 6)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"),alpha = alpha) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
dev.off()
varx="minDistToBd"
vary="minDistToC"
alpha = 0.5
file.plot = paste0("Plot_",varx,"_VS_",vary,label_subsets,".pdf")
pdf(file.plot, width = 6, height = 6)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"),alpha = alpha) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
dev.off()
# ... Here we plot combinations of variables with common properties
varx.vec = c("meanDistToBd","minDistToBd","minDistToBd")
vary.vec = c("meanDistToC","minDistToC","meanDistToC")
for(i in 1:length(varx.vec)){
varx = varx.vec[i]
vary = vary.vec[i]
file.plot = paste0("Plot_",varx,"_VS_",vary,label_subsets,".pdf")
pdf(file.plot, width = 6, height = 6)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"),alpha = alpha) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
dev.off()
}
# ... Here we plot combinations of variables with common properties
varx.vec = c("meanDistToBd","minDistToBd","minDistToBd","meanDistToBd")
vary.vec = c("meanDistToC","minDistToC","meanDistToC","minDistToC")
for(i in 1:length(varx.vec)){
varx = varx.vec[i]
vary = vary.vec[i]
file.plot = paste0("Plot_",varx,"_VS_",vary,label_subsets,".pdf")
pdf(file.plot, width = 6, height = 6)
gg = ggplot(dist.df, aes_string(x = varx,
y = vary))+
geom_point(aes_string(color = "Class",
shape = "id.DminToC",
size = "Nsame.class"),alpha = alpha) +
scale_size_manual(values=c("2" = 1.5,"3" = 2.3,"4" = 3.2))
#geom_jitter()+
#geom_smooth()
print(gg)
dev.off()
}
