install.packages("RbioRXN")
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/aitchinson.R", echo=TRUE)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/communities_superposition.R", echo=TRUE)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/aitchinson.R", echo=TRUE)
Cross = aitchinson(Q, P) # rescales internally, comment rescale if you use it
f
Cross = aitchinson(Q, P) # rescales internally, comment rescale if you use it
plot(t_i, t_j)
plot(t_i, t_j)
plot(t_i, t_j)
Tot = sum(t_i) + sum(t_j)
Tot = (-D + 1 + sqrt((D-1)^2 + 4 * Tot))/2
# --- Estimate correlations
Corr = matrix(0, nrow = N, ncol = M)
i=1; j=1
diff = Alog[, i] - Blog[, j]
t_ij = var(diff)
w_i = sqrt(t_i[i])/(D + Tot -1)
w_j = sqrt(t_j[j])/(D + Tot -1)
Corr[i, j] = (w_i^2 + w_j^2 - t_ij)/(2*w_i*w_j)
Corr[1,1]
Tot = (sum(t_i) + sum(t_j))/(2*(D-1))
w_i = sqrt((t_i[i] - Tot)/(D -2))
w_j = sqrt((t_j[j] - Tot)/(D -2))
t_ij = var(diff)
(w_i^2 + w_j^2 - t_ij)/(2*w_i*w_j)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/aitchinson.R", echo=TRUE)
# Start computation -------
# --- Compute the transformation matrix
Pbas =  ASV.ref.sub
# Start computation -------
# --- Compute the transformation matrix
Pbas =  ASV.ref.sub
Qbas = ASV.sub.list[[Rep+1]]
View(superimp)
View(superimp)
Cross = aitchinson(Qbas, Pbas) # rescales internally, comment rescale if you use it
Cross = aitchinson(Qbas, Pbas) # rescales internally, comment rescale if you use it
i=1;j=1
Corr[1,1]
D = N + M
w_i = sqrt((t_i[i] - Tot)/(D - 2))
w_j = sqrt((t_j[j] - Tot)/(D - 2))
(w_i^2 + w_j^2 - t_ij)/(2*w_i*w_j)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/aitchinson.R", echo=TRUE)
Cross = aitchinson(Qbas, Pbas) # rescales internally, comment rescale if you use it
quantile(Cross, na.rm = T, probs = probs)
quantile(Cross, na.rm = T)
Cross = aitchinson(Q, P) # rescales internally, comment rescale if you use it
quantile(Cross, na.rm = T)
quantile(Cross, na.rm = T, probs = probs)
test = rdirichlet(10, c(0.1,0.25,0.5,0.75,1, 1.2))
test
test = rdirichlet(10, c(10,25,50,75,100, 200))
test
20/26
17/26
26/273
26/280
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/communities_superposition.R", echo=TRUE)
# Independent SVD to extract eigenvectors  --------
#ord.list = list()
k = 0
# ... ordination for the replicates that were not used in the transformation
fileSumm = "Summary_SVD_replicates_to_startRotated.txt"
sink(fileSumm) # start sink to file
cat("# ** SVD of independent replicates \n")
Qc.list = list()
for(i in 2:length(ASV.sub.rel.list)){ #replicates 1, 2, 3, 4
k = k+1
cat(paste0("# --- Final replicate: ",k,"\n"))
Qtmp = ASV.sub.rel.list[[i]]
Qc = scale(Qtmp, center = TRUE, scale = FALSE)
Qc.list[[i]] = Qc
cat("# RMSD between final replicate and transformed starting communities \n")
Dsr.sq = (Prot - Qc)**2
rmsd = sqrt(sum(apply(Dsr.sq, 1, sum)) / dim(Dsr.sq)[1]);
print(rmsd)
ord = svd(Qc)
variance.explained = prop.table(ord$d^2)
cat("# variance explained with the SVD (5 first components) \n")
print(variance.explained[1:5])
sv = as.data.frame(ord$u[, c(1,2,3,4)]) # first and second singular vector
col_names = c("sv1", "sv2","sv3","sv4")
col_names = paste0("Rep",k,"_",col_names)
colnames(sv) = col_names
if(k == 1){
sv.df = sv
}else{
sv.df = cbind(sv.df,sv)
}
}
# .... the following was done for the representations below
sv.df$Rep3_sv1 = (-1)*sv.df$Rep3_sv1
sv.df$Rep3_sv2 = (-1)*sv.df$Rep3_sv2
# ... transformed data
cat("# SVD of transformed starting community \n")
ord.Prot = svd(Prot)
variance.explained = prop.table(ord.Prot$d^2)
cat("# variance explained with the SVD (5 first components) \n")
(variance.explained[1:5])
sv = as.data.frame(ord.Prot$u[, c(1,2,3,4)]) # first and second singular vector
col_names = c("sv1", "sv2","sv3", "sv4")
col_names = paste0("Rot_",col_names)
colnames(sv) = col_names
sv.df = cbind(sv.df, sv)
colnames(sv.df)
# ... Compare if eigenvectors are in the same order are the same
Neig = dim(sv.df)[2]
prod = matrix(data = 0, nrow = Neig, ncol = Neig)
for(i in 1:Neig){
for(j in i:Neig){
prod[i, j] = sv.df[, i] %*% sv.df[, j]
}
}
colnames(prod) = colnames(sv.df)
rownames(prod) = colnames(sv.df)
cat("# All-against-all scalar product between left eigenvectors \n")
options(max.print=500)
(prod)
sink() # end sink
options(max.print=50)
# --- Plots
sv.df.gg = reshape_df_to_ggplot(sv.df, x.vec = c("Rot_sv1"),
y.vec = c("Rep1_sv1","Rep2_sv1","Rep3_sv1"),
char.list = list(c("Rep. 1","Rep. 2", "Rep. 3")))
colnames(sv.df.gg)
xlab = "SVD, component 1 (prediction)"
ylab = "SVD, component 1 (experiments)"
filePlot1 = "Plot_SVD1_predictionVsExperiments.pdf"
pdf(file = filePlot1, width = 10)
g = ggplot(sv.df.gg,aes(x = x.out, y = y.out, color = new_factor1))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(label.y.npc = c(0.99, 0.94, 0.90))+ #this means at 35th unit in the y axis, the r squared and p value will be shown
stat_regline_equation(label.y.npc = c(0.96, 0.92, 0.88))+ #this means at 30th unit regresion line equation will be shown
scale_color_manual(labels = c("1", "2","3"),
values = c(2, 3, 4))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
dev.off()
# .... Same for component 2
sv.df.gg = reshape_df_to_ggplot(sv.df, x.vec = c("Rot_sv1"),
y.vec = c("Rep1_sv2","Rep2_sv2","Rep3_sv2"),
char.list = list(c("Rep. 1","Rep. 2", "Rep. 3")))
colnames(sv.df.gg)
xlab = "SVD, component 1 (prediction)"
ylab = "SVD, component 2 (experiments)"
filePlot2 = "Plot_SVD1_prediction_Vs_SVD2_Experiments.pdf"
pdf(file = filePlot2, width = 10)
g = ggplot(sv.df.gg,aes(x = x.out, y = y.out, color = new_factor1))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(label.y.npc = c(0.19, 0.14, 0.10))+ #this means at 35th unit in the y axis, the r squared and p value will be shown
stat_regline_equation(label.y.npc = c(0.16, 0.12, 0.08))+ #this means at 30th unit regresion line equation will be shown
scale_color_manual(labels = c("1", "2","3"),
values = c(2, 3, 4))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
dev.off()
Mc = Prot
for(i in 1:length(Qc.list)){
Mc = rbind(Mc, Qc.list[[i]])
}
dim(Mc)
# --- Perform SVD
ord = svd(Mc)
variance.explained = prop.table(ord$d^2)
cat("# variance explained with the SVD (5 first components) \n")
print(variance.explained[1:5])
sv = as.data.frame(ord$u[, c(1,2)])
# ...... reshape for ggplot
Nsubset = 5 # 4 replicates plus transformed data
Lsubset = dim(sv)[1]/Nsubset
# ..... extract first eigenvector
sv.long.x = rep(sv$V1[1:Lsubset], 3)# 4) # transformed data (x axis)
sv.long.y = c(sv$V1[(Lsubset+1):(2*Lsubset)], # 4 exp replicates (y axis)
sv$V1[(2*Lsubset+1):(3*Lsubset)],
sv$V1[(3*Lsubset+1):(4*Lsubset)])#,
#sv$V1[(4*Lsubset+1):(5*Lsubset)])
sv.long.fac = c(rep("1", Lsubset),
rep("2", Lsubset),
rep("3", Lsubset))#,
#rep("4", Lsubset))
sv.long = data.frame(sv.long.x, sv.long.y, sv.long.fac)
xlab = "SVD, component 1 (prediction)"
ylab = "SVD, component 1 (experiments)"
filePlot3 = "Plot_SVD1_prediction_Vs_SVD1_Experiments_sameSVD.pdf"
pdf(file = filePlot3, width = 10)
g = ggplot(sv.long, aes(x = sv.long.x, y =sv.long.y, color = sv.long.fac))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
label.y.npc = c(0.99, 0.94, 0.90))+
stat_regline_equation(label.y.npc = c(0.95, 0.91, 0.87))+
scale_color_manual(labels = c("1", "2", "3", "4"),
values = c(2, 3, 4, 5))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
dev.off()
# ..... extract second eigenvector
sv.long.x = rep(sv$V2[1:Lsubset], 3)# 4) # transformed data (x axis)
sv.long.y = c(sv$V2[(Lsubset+1):(2*Lsubset)], # 4 exp replicates (y axis)
sv$V2[(2*Lsubset+1):(3*Lsubset)],
sv$V2[(3*Lsubset+1):(4*Lsubset)])#,
#sv$V1[(4*Lsubset+1):(5*Lsubset)])
sv.long.fac = c(rep("1", Lsubset),
rep("2", Lsubset),
rep("3", Lsubset))#,
#rep("4", Lsubset))
sv.long = data.frame(sv.long.x, sv.long.y, sv.long.fac)
xlab = "SVD, component 2 (prediction)"
ylab = "SVD, component 2 (experiments)"
filePlot4 = "Plot_SVD2_prediction_Vs_SVD2_Experiments_sameSVD.pdf"
pdf(file = filePlot4, width = 10)
g = ggplot(sv.long, aes(x = sv.long.x, y =sv.long.y, color = sv.long.fac))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
label.y.npc = c(0.99, 0.94, 0.90))+
stat_regline_equation(label.y.npc = c(0.95, 0.91, 0.87))+
scale_color_manual(labels = c("1", "2", "3", "4"),
values = c(2, 3, 4, 5))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
dev.off()
