cat("# variance explained with the SVD (5 first components) \n")
print(variance.explained[1:5])
sv = as.data.frame(ord$u[, c(1,2,3,4)]) # first and second singular vector
col_names = c("sv1", "sv2","sv3","sv4")
col_names = paste0("Rep",k,"_",col_names)
colnames(sv) = col_names
if(k == 1){
sv.df = sv
}else{
sv.df = cbind(sv.df,sv)
}
}
sink() # end sink
sink(fileSumm) # start sink to file
cat("# ** SVD of independent replicates \n")
Qc.list = list()
for(i in 2:length(ASV.sub.rel.list)){ #replicates 1, 2, 3, 4
k = k+1
cat(paste0("# --- Final replicate: ",k,"\n"))
Qtmp = ASV.sub.rel.list[[i]]
Qc = scale(Qtmp, center = TRUE, scale = FALSE)
Qc.list[[i]] = Qc
cat("# RMSD between final replicate and transformed starting communities \n")
Dsr.sq = (Prot - Qc)**2
rmsd = sqrt(sum(apply(Dsr.sq, 1, sum)) / dim(Dsr.sq)[1]);
print(rmsd)
ord = svd(Qc)
variance.explained = prop.table(ord$d^2)
cat("# variance explained with the SVD (5 first components) \n")
print(variance.explained[1:5])
sv = as.data.frame(ord$u[, c(1,2,3,4)]) # first and second singular vector
col_names = c("sv1", "sv2","sv3","sv4")
col_names = paste0("Rep",k,"_",col_names)
colnames(sv) = col_names
if(k == 1){
sv.df = sv
}else{
sv.df = cbind(sv.df,sv)
}
}
sink()
ord = svd(Mc)
variance.explained = prop.table(ord$d^2)
print(variance.explained[1:5])
sv = as.data.frame(ord$u[, c(1,2)])
1365/5
Nsubset = 5 # 4 replicates plus transformed data
Lsubset = dim(sv)[1]/Nsubset
sv.long.x = rep(sv$V1[1:Lsubset], 3)
sv.long.y = c(sv$V1[(Lsubset+1),2*Lsubset],
sv$V1[(2*Lsubset+1),3*Lsubset],
sv$V1[(3*Lsubset+1),4*Lsubset])
sv.long.y = c(sv$V1[(Lsubset+1),(2*Lsubset)],
sv$V1[(2*Lsubset+1),(3*Lsubset)],
sv$V1[(3*Lsubset+1),(4*Lsubset)])
sv.long.y = c(sv$V1[(Lsubset+1):(2*Lsubset)],
sv$V1[(2*Lsubset+1):(3*Lsubset)],
sv$V1[(3*Lsubset+1):(4*Lsubset)])
sv.long.fac = c(rep("1", Lsubset),
rep("2", Lsubset),
rep("3", Lsubset),)
sv.long.fac = c(rep("1", Lsubset),
rep("2", Lsubset),
rep("3", Lsubset))
# ..... extract first eigenvector
sv.long.x = rep(sv$V1[1:Lsubset], 4) # transformed data (x axis)
sv.long.y = c(sv$V1[(Lsubset+1):(2*Lsubset)], # 4 exp replicates (y axis)
sv$V1[(2*Lsubset+1):(3*Lsubset)],
sv$V1[(3*Lsubset+1):(4*Lsubset)],
sv$V1[(4*Lsubset+1):(5*Lsubset)])
sv.long.fac = c(rep("1", Lsubset),
rep("2", Lsubset),
rep("3", Lsubset),
rep("4", Lsubset))
sv.long = data.frame(sv.long.x, sv.long.y, sv.long.fac)
colnames(sv.long)
xlab = "SVD, component 1 (prediction)"
ylab = "SVD, component 1 (experiments)"
filePlot2 = "Plot_SVD1_prediction_Vs_SVD1_Experiments_sameSVD.pdf"
filePlot3 = "Plot_SVD1_prediction_Vs_SVD1_Experiments_sameSVD.pdf"
pdf(file = filePlot3, width = 10)
g = ggplot(sv.df.gg,aes(x = sv.long.x, y =sv.long.y, color = sv.long.fac))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(label.y.npc = c(0.19, 0.14, 0.10))+ #this means at 35th unit in the y axis, the r squared and p value will be shown
stat_regline_equation(label.y.npc = c(0.16, 0.12, 0.08))+ #this means at 30th unit regresion line equation will be shown
scale_color_manual(labels = c("1", "2","3"),
values = c(2, 3, 4))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
g = ggplot(sv.long, aes(x = sv.long.x, y =sv.long.y, color = sv.long.fac))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(label.y.npc = c(0.19, 0.14, 0.10))+ #this means at 35th unit in the y axis, the r squared and p value will be shown
stat_regline_equation(label.y.npc = c(0.16, 0.12, 0.08))+ #this means at 30th unit regresion line equation will be shown
scale_color_manual(labels = c("1", "2","3"),
values = c(2, 3, 4))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
g = ggplot(sv.long, aes(x = sv.long.x, y =sv.long.y, color = sv.long.fac))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(label.y.npc = c(0.19, 0.14, 0.10))+ #this means at 35th unit in the y axis, the r squared and p value will be shown
stat_regline_equation(label.y.npc = c(0.16, 0.12, 0.08))+ #this means at 30th unit regresion line equation will be shown
scale_color_manual(labels = c("1", "2", "3", "4"),
values = c(2, 3, 4, 5))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
dev.off()
# ..... extract first eigenvector
sv.long.x = rep(sv$V1[1:Lsubset], 3)# 4) # transformed data (x axis)
sv.long.y = c(sv$V1[(Lsubset+1):(2*Lsubset)], # 4 exp replicates (y axis)
sv$V1[(2*Lsubset+1):(3*Lsubset)],
sv$V1[(3*Lsubset+1):(4*Lsubset)])#,
#sv$V1[(4*Lsubset+1):(5*Lsubset)])
sv.long.fac = c(rep("1", Lsubset),
rep("2", Lsubset),
rep("3", Lsubset))#,
#rep("4", Lsubset))
sv.long = data.frame(sv.long.x, sv.long.y, sv.long.fac)
xlab = "SVD, component 1 (prediction)"
ylab = "SVD, component 1 (experiments)"
filePlot3 = "Plot_SVD1_prediction_Vs_SVD1_Experiments_sameSVD.pdf"
pdf(file = filePlot3, width = 10)
g = ggplot(sv.long, aes(x = sv.long.x, y =sv.long.y, color = sv.long.fac))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(label.y.npc = c(0.99, 0.94, 0.90))+
stat_regline_equation(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
label.y.npc = c(0.96, 0.92, 0.88))+
scale_color_manual(labels = c("1", "2", "3", "4"),
values = c(2, 3, 4, 5))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
pdf(file = filePlot3, width = 10)
g = ggplot(sv.long, aes(x = sv.long.x, y =sv.long.y, color = sv.long.fac))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
label.y.npc = c(0.99, 0.94, 0.90))+
stat_regline_equation(label.y.npc = c(0.96, 0.92, 0.88))+
scale_color_manual(labels = c("1", "2", "3", "4"),
values = c(2, 3, 4, 5))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
dev.off()
pdf(file = filePlot3, width = 10)
g = ggplot(sv.long, aes(x = sv.long.x, y =sv.long.y, color = sv.long.fac))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
label.y.npc = c(0.99, 0.94, 0.90))+
stat_regline_equation(label.y.npc = c(0.95, 0.91, 0.87))+
scale_color_manual(labels = c("1", "2", "3", "4"),
values = c(2, 3, 4, 5))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
dev.off()
# ..... extract second eigenvector
sv.long.x = rep(sv$V2[1:Lsubset], 3)# 4) # transformed data (x axis)
sv.long.y = c(sv$V2[(Lsubset+1):(2*Lsubset)], # 4 exp replicates (y axis)
sv$V2[(2*Lsubset+1):(3*Lsubset)],
sv$V2[(3*Lsubset+1):(4*Lsubset)])#,
#sv$V1[(4*Lsubset+1):(5*Lsubset)])
sv.long.fac = c(rep("1", Lsubset),
rep("2", Lsubset),
rep("3", Lsubset))#,
#rep("4", Lsubset))
sv.long = data.frame(sv.long.x, sv.long.y, sv.long.fac)
xlab = "SVD, component 2 (prediction)"
ylab = "SVD, component 2 (experiments)"
filePlot4 = "Plot_SVD2_prediction_Vs_SVD2_Experiments_sameSVD.pdf"
pdf(file = filePlot4, width = 10)
g = ggplot(sv.long, aes(x = sv.long.x, y =sv.long.y, color = sv.long.fac))+
geom_point(alpha = 0.7, size = 5)+
geom_smooth(method = "lm")+
stat_cor(aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
label.y.npc = c(0.99, 0.94, 0.90))+
stat_regline_equation(label.y.npc = c(0.95, 0.91, 0.87))+
scale_color_manual(labels = c("1", "2", "3", "4"),
values = c(2, 3, 4, 5))+
xlab(xlab)+ylab(ylab)+
labs(color = "Replicates")+
theme_bw()+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
legend.title = element_text(size = 12),
legend.text = element_text(size = 12))
print(g)
dev.off()
#### START EDITING
# --- Path to repository
pathRepo="../10_functionink/functionInk" #  A symbolic link to the repository
# --- Name and path of the file containing the network
pathNet="../../9_predictions/" # absolute path, or one relative to the root of the repo
fileNet="Network_transformation_matrix_Starting2Rep4.tsv"
# --- Set up the paths
if(pathRepo != "."){
setwd(pathRepo)
}
src.dir=paste("scripts","analysis_R",sep="/")
setwd(src.dir)
source("extractPartDensity.R")
source("run_pipeline.R")
# --- Run the pipeline
run_pipeline(fileNet,pathNet,pathRepo, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="all")
pathRepo
source("~/APASCUAL/Research/Programs/algorithms/Linkage/functionInk/scripts/analysis_R/run_pipeline.R", echo=TRUE)
source("~/APASCUAL/Research/Programs/algorithms/Linkage/functionInk/scripts/analysis_R/nodeLinkage_pipeline.R", echo=TRUE)
#### START EDITING
# --- Path to repository
pathRepo="../10_functionink/functionInk" #  A symbolic link to the repository relative to src
# --- Name and path of the file containing the network
pathNet="../../9_predictions/" # absolute path, or one relative to the root of the repo
fileNet="Network_transformation_matrix_Starting2Rep4.tsv"
# --- Set up the paths
if(pathRepo != "."){
setwd(pathRepo)
}
#### START EDITING
# --- Path to repository
pathRepo="../10_functionink/functionInk" #  A symbolic link to the repository relative to src
# --- Name and path of the file containing the network
pathNet="../../9_predictions/" # absolute path, or one relative to the root of the repo
fileNet="Network_transformation_matrix_Starting2Rep4.tsv"
# ---- STOP EDITING HERE
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
dirSrc=paste(this.dir,"/src/",sep="") # Directory where the code is
#dirSrc=here::here() # src of the repository
setwd(dirSrc)
# --- Set up the paths
if(pathRepo != "."){
setwd(pathRepo)
}
src.dir=paste("scripts","analysis_R",sep="/")
setwd(src.dir)
source("extractPartDensity.R")
source("run_pipeline.R")
# --- Run the pipeline
run_pipeline(fileNet,pathNet, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="all")
getwd()
setwd(dirSrc)
# --- Run the pipeline
run_pipeline(fileNet,pathNet, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="all")
setwd(dirSrc)
# --- Run the pipeline
run_pipeline(fileNet,pathNet, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="all")
getwd()
# --- Name and path of the file containing the network
pathNet="../9_predictions/" # absolute path, or one relative to the root of the repo
# --- Name and path of the file containing the network
pathNet="../9_predictions/" # absolute path, or one relative to the src of the repo
setwd(dirSrc)
# --- Run the pipeline
run_pipeline(fileNet,pathNet, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="all")
#### START EDITING
# --- Path to repository
pathRepo="10_functionink/functionInk" #  A symbolic link located at 10 pointing to the root of functionink repo
# --- Name and path of the file containing the network
pathNet="9_predictions/" # absolute path, or one relative to the root of the repo
fileNet="Network_transformation_matrix_Starting2Rep4.tsv"
# ---- STOP EDITING HERE
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
# --- Set up the paths and source scripts
functionink.dir=paste(this.dir, pathRepo,"scripts","analysis_R",sep="/")
setwd(functionink.dir)
source("extractPartDensity.R")
source("run_pipeline.R")
setwd(this.dir)
# --- Set  path network
pathNet = paste(this.dir, pathNet)
# --- Run the pipeline
run_pipeline(fileNet,pathNet,functionink.dir, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="all")
functionink.dir
#### START EDITING
# --- Path to repository
pathRepo="10_functionink/functionInk" #  A symbolic link located at 10 pointing to the root of functionink repo
# --- Name and path of the file containing the network
pathNet="9_predictions/" # absolute path, or one relative to the root of the repo
fileNet="Network_transformation_matrix_Starting2Rep4.tsv"
# ---- STOP EDITING HERE
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
# --- Set up the paths and source scripts
functionink.dir=paste(this.dir, pathRepo,sep="/")
setwd(functionink.dir)
source("extractPartDensity.R")
#### START EDITING
# --- Path to repository
pathRepo="10_functionink/functionInk" #  A symbolic link located at 10 pointing to the root of functionink repo
# --- Name and path of the file containing the network
pathNet="9_predictions/" # absolute path, or one relative to the root of the repo
fileNet="Network_transformation_matrix_Starting2Rep4.tsv"
# ---- STOP EDITING HERE
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
# --- Set up the paths and source scripts
pathRepo = paste(this.dir, pathRepo,sep="/")
functionink.scripts=paste(pathRepo,"scripts","analysis_R",sep="/")
setwd(functionink.scripts)
source("extractPartDensity.R")
source("run_pipeline.R")
setwd(this.dir)
# --- Set  path network
pathNet = paste(this.dir, pathNet)
# --- Run the pipeline
run_pipeline(fileNet,pathNet = pathNet, pathRepo = pathRepo, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="all")
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/functionink_pipeline.R", echo=TRUE)
pathNet
# --- Set  path network
pathNet = paste(this.dir, pathNet,sep="/")
# --- Run the pipeline
run_pipeline(fileNet,pathNet = pathNet, pathRepo = pathRepo, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="all")
pathNet
#library(here) # you can skip if you use absolute paths
rm(list=ls())
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/functionink_pipeline.R", echo=TRUE)
setwd()
getwd()
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/communities_superposition.R", echo=TRUE)
U %*% t(U)
I = U %*% t(U)
I[1:5,1:5]
U = U[upper.tri(U)]
# .... Write output
setwd(dirOut)
U = superimp$U
# .... modify U to work with a network
U = U[upper.tri(U)]
U_long = melt(U)
hist(U_long$value, breaks = 50)
U_long$value = U_long$value[which(abs(U_long$value) > 0)]
id.nonzero = which(abs(U_long$value) > 0)
U_long = melt(U)
id.nonzero = which(abs(U_long$value) > 0)
U_long = U_long[id.nonzero, ]
hist(U_long$value, breaks = 50)
head(U_long)
U = superimp$U
Prot = superimp$Prot
rownames(Prot) = rownames(P)
colnames(Prot) = colnames(P)
rownames(U) = colnames(P)
colnames(U) = colnames(P)
# .... modify U to work with a network
U = U[upper.tri(U)]
U_long = melt(U)
id.nonzero = which(abs(U_long$value) > 0)
U_long = U_long[id.nonzero, ]
head(U_long)
U = superimp$U
Prot = superimp$Prot
rownames(Prot) = rownames(P)
colnames(Prot) = colnames(P)
rownames(U) = colnames(P)
colnames(U) = colnames(P)
# .... modify U to work with a network
dim(U)
U = U[upper.tri(U)]
dim(U)
U
U = superimp$U
Prot = superimp$Prot
rownames(Prot) = rownames(P)
colnames(Prot) = colnames(P)
rownames(U) = colnames(P)
colnames(U) = colnames(P)
U[loewer.tri(U)] = 0
U[lower.tri(U)] = 0
dim(U)
U_long = melt(U)
id.nonzero = which(abs(U_long$value) > 0)
U_long = U_long[id.nonzero, ]
hist(U_long$value, breaks = 50)
mean = mean(U_long$value)
stdv = sd(U_long$value)
z.score = (U_long$value - mean)/stdv
quantile(z.score)
z.score.sig = which(abs(z.score) > 7)
U_long = U_long[z.score.sig, ]
U_long$Type = NA
U_long$Type[which(U_long$value > 0)] = "Pos"
U_long$Type[which(U_long$value < 0)] = "Neg"
fileTrans = paste0("Network_transformation_matrix_Starting2Rep",Rep,".tsv")
write.table(U_long, file=fileTrans, sep = "\t", quote = FALSE, row.names = F)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/functionink_pipeline.R", echo=TRUE)
gc()
gc()
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/communities_superposition.R", echo=TRUE)
View(U_long)
View(U)
U[lower.tri(U, diag = F)] = 0
U[lower.tri(U, diag = T)] = 0
dim(U)
U_long = melt(U)
id.nonzero = which(abs(U_long$value) > 0)
U_long = U_long[id.nonzero, ]
hist(U_long$value, breaks = 50)
mean = mean(U_long$value)
stdv = sd(U_long$value)
z.score = (U_long$value - mean)/stdv
quantile(z.score)
z.score.sig = which(abs(z.score) > 7)
U_long = U_long[z.score.sig, ]
U_long$Type = NA
U_long$Type[which(U_long$value > 0)] = "Pos"
U_long$Type[which(U_long$value < 0)] = "Neg"
fileTrans = paste0("Network_transformation_matrix_Starting2Rep",Rep,".tsv")
write.table(U_long, file=fileTrans, sep = "\t", quote = FALSE, row.names = F)
z.score.sig = which(abs(z.score) > 3)
U_long = U_long[z.score.sig, ]
z.score.sig = which(abs(z.score) > 5)
U_long = U_long[z.score.sig, ]
U_long$Type = NA
U_long$Type[which(U_long$value > 0)] = "Pos"
U_long$Type[which(U_long$value < 0)] = "Neg"
fileTrans = paste0("Network_transformation_matrix_Starting2Rep",Rep,".tsv")
write.table(U_long, file=fileTrans, sep = "\t", quote = FALSE, row.names = F)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/functionink_pipeline.R", echo=TRUE)
#library(here) # you can skip if you use absolute paths
rm(list=ls())
#### START EDITING
# --- Path to repository
pathRepo="10_functionink/functionInk" #  A symbolic link located at 10 pointing to the root of functionink repo
# --- Name and path of the file containing the network
pathNet="9_predictions/" # absolute path, or one relative to the root of the repo
fileNet="Network_transformation_matrix_Starting2Rep4.tsv"
# ---- STOP EDITING HERE
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1]
# --- Set up the paths and source scripts
pathRepo = paste(this.dir, pathRepo,sep="/")
functionink.scripts=paste(pathRepo,"scripts","analysis_R",sep="/")
setwd(functionink.scripts)
source("extractPartDensity.R")
source("run_pipeline.R")
setwd(this.dir)
# --- Set  path network
pathNet = paste(this.dir, pathNet,sep="/")
# --- Run the pipeline
run_pipeline(fileNet,pathNet = pathNet, pathRepo = pathRepo, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="all")
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/communities_superposition.R", echo=TRUE)
View(U_long)
mean = mean(U_long$value)
stdv = sd(U_long$value)
z.score = (U_long$value - mean)/stdv
quantile(z.score)
z.score.sig = which(abs(z.score) > 5)
U_long = U_long[z.score.sig, ]
View(U_long)
which(is.na(U_long$value))
U_long$Type = NA
U_long$Type[which(U_long$value > 0)] = "Pos"
U_long$Type[which(U_long$value < 0)] = "Neg"
which(is.na(U_long$Type))
fileTrans = paste0("Network_transformation_matrix_Starting2Rep",Rep,".tsv")
write.table(U_long, file=fileTrans, sep = "\t", quote = FALSE, row.names = F)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/convergence/Partial_Matt_pipeline/src/functionink_pipeline.R", echo=TRUE)
# --- Run the pipeline
run_pipeline(fileNet,pathNet = pathNet, pathRepo = pathRepo, # mandatory
weighted=TRUE,directed=FALSE, # options set as in the vignette
types=TRUE,method="Average",mode="internal")
