n_ASV_class = colSums(ASV.table.class.bin)
freq_ASV_class = n_ASV_class/dim(ASV.table.class.bin)[1]
freq_ASV.list[[class]] = freq_ASV_class
freq_ASV.list = list()
freq_ASV.list[[class]] = freq_ASV_class
# --- Compute the frequency in the whole dataset
n_ASV_all = colSums(ASV.table.bin)
freq_ASV_all = n_ASV_all/dim(ASV.table.bin)[1]
freq_ASV_class = freq_ASV.list[[class]]
P_class = P_class.list[[class]]
# --- Compute propensity for each taxon
Prop.list = list()
Prop.list[[class]] = log(freq_ASV_class)-log(freq_ASV_all)-log(P_class)
source('~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities_fun.R')
Propensities = propensities_fun(ASV.table.class.bin.list, P_class.list)
Propensities
str(Propensities)
which(Propensities == -Inf)
which(Propensities[[1]] == -Inf)
P = Propensities[[1]]
P[which(P == -Inf)] = 0
which(P == -Inf)
class_n = names(ASV.table.class.bin.list)
str(Propensities)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities.R", echo=TRUE)
View(P_summary_all)
setwd(dirOut)
fileOut = "Propensities_ASVforFinalClass.tsv"
write.table(P_summary_all, file = fileOut, quote = F, sep = "\t")
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities.R", echo=TRUE)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities_fun.R", echo=TRUE)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities.R", echo=TRUE)
View(P_boot_summary_class1)
View(P_boot_class2)
View(P_boot_summary_class2)
View(P_summary_all)
P_summary_all = as.data.frame(cbind(P_boot_summary_class1,P_boot_summary_class2,P_boot_summary_mix))
View(P_summary_all)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/compare_propensities.R", echo=TRUE)
columns_propensities = list()
columns_propensities[["class1"]] = c(1,2,3)
columns_propensities[["class2"]] = c(5,6,7)
columns_propensities[["classmix"]] = c(9,10,11)
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
View(max_prop.cols)
max_prop.cols[1,i]
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
View(P_summary_all)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/compare_propensities.R", echo=TRUE)
columns_propensities = list()
columns_propensities[["class1"]] = c(1,2,3)
columns_propensities[["class2"]] = c(5,6,7)
columns_propensities[["classmix"]] = c(9,10,11)
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/compare_propensities.R", echo=TRUE)
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
P_summary_all = Prop.compare$P_summary
ASV.sig.list = Prop.compare$ASV_sig
# --- Print some results and save
names(ASV.sig.list)
length(ASV.sig.list[["class2"]])
P_summary_all = as.data.frame(cbind(P_boot_summary_class1,P_boot_summary_class2,P_boot_summary_mix))
columns_propensities = list()
columns_propensities[["class1"]] = c(1,2,3)
columns_propensities[["class2"]] = c(5,6,7)
columns_propensities[["classmix"]] = c(9,10,11)
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
P_summary_all = Prop.compare$P_summary
ASV.sig.list = Prop.compare$ASV_sig
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/compare_propensities.R", echo=TRUE)
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
which(prop_sig_class == class
)
rownames(P_summary_all)[which(prop_sig_class == class)]
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/compare_propensities.R", echo=TRUE)
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/compare_propensities.R", echo=TRUE)
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/compare_propensities.R", echo=TRUE)
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
P_summary_all = Prop.compare$P_summary
ASV.sig.list = Prop.compare$ASV_sig
length(which(P_summary_all$sig_class1 == 1))
length(which((P_summary_all$sig_class1 == 1)&(P_summary_all$P_obs_class1 > 0))
)
length(which(P_summary_all$sig_class2 == 1)&(P_summary_all$P_obs_class2 > 0)))
length(which(P_summary_all$sig_class2 == 1)&(P_summary_all$P_obs_class2 > 0))
length(P_summary_all$P_obs_class1[id.sig] > 0)
id.sig = which(P_summary_all$sig_class1 == 1)
length(P_summary_all$P_obs_class1[id.sig] > 0)
id.sig.class2 = which(P_summary_all$sig_class2 == 1)
length(P_summary_all$P_obs_class1[id.sig.class2] > 0)
length(P_summary_all$P_obs_class2[id.sig.class2] > 0)
id.sig.classmix = which(P_summary_all$sig_classmix == 1)
length(P_summary_all$P_obs_classmix[id.sig.classmix] > 0)
id.sig.classmix = which(P_summary_all$sig_mix == 1)
length(P_summary_all$P_obs_classmix[id.sig.classmixmix] > 0)
length(P_summary_all$P_obs_mix[id.sig.classmix] > 0)
length(P_summary_all$P_obs_class1[id.sig.class1] > 0)
id.sig.class1 = which(P_summary_all$sig_class1 == 1)
length(P_summary_all$P_obs_class1[id.sig.class1] > 0)
length(P_summary_all$P_obs_class2[id.sig.class2] > 0)
length(P_summary_all$P_obs_mix[id.sig.classmix] > 0)
class1_and_2 = c(id.sig.class1,id.sig.class2)
freq_1and2 = table(class1_and_2)
freq_1and2
freq_1and2 = length(table(class1_and_2) == 2)
freq_1and2 = which(table(class1_and_2) == 2)
freq_1and2 = length(which(table(class1_and_2) == 2))
# 363 significant propensity in both 1 and 2
class1_and_mix = c(id.sig.class1,id.sig.classmix)
length(which(table(class1_and_mix) == 2))
# 543 siginificant propensityy in both 1 and mix
class2_and_mix = c(id.sig.class1,id.sig.classmix)
# 543 siginificant propensityy in both 1 and mix
class2_and_mix = c(id.sig.class1,id.sig.classmix)
length(which(table(class2_and_mix) == 2))
# 543 siginificant propensityy in both 1 and mix
class2_and_mix = c(id.sig.class2,id.sig.classmix)
length(which(table(class2_and_mix) == 2))
# 362 significant propensity in 2 and mix
class_all =  c(id.sig.class1,id.sig.class2,id.sig.classmix)
length(which(table(class_all) == 3))
P_summary_all[,class_all]
# --- Individual positive significant propensities in more than one class
id.sig.class1_and_2 = c(id.sig.class1,id.sig.class2)
length(which(table(id.sig.class1_and_2) == 2))
# 363 significant (positive) propensity in both 1 and 2
id.sig.class1_and_mix = c(id.sig.class1,id.sig.classmix)
length(which(table(id.sig.class1_and_mix) == 2))
# 543 siginificant propensity in both 1 and mix
id.sig.class2_and_mix = c(id.sig.class2,id.sig.classmix)
length(which(table(id.sig.class2_and_mix) == 2))
# 362 significant propensity in 2 and mix
id.sig.class_all =  c(id.sig.class1,id.sig.class2,id.sig.classmix)
length(which(table(id.sig.class_all) == 3))
P_summary_all[class_all, ]
View(P_boot_summary_class1)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/sigboot.R", echo=TRUE)
# --- Bootstrapped propensities for each ASV (alpha = 0.05)
q=c(0.05,0.95)
qntl = apply(P_boot_class1[,2:(nboot+1)],
MARGIN = 1, FUN = function(x){quantile(x, na.rm = T, p = q)})
P_boot_summary_class1 = cbind(P_boot_class1[,1], t(qntl))
sig = apply(P_boot_summary_class1, MARGIN = 1,
FUN = function(x){sigboot(x[1],x[2],x[3])})
P_boot_summary_class1 = cbind(P_boot_summary_class1, sig)
colnames(P_boot_summary_class1)[1] = c("P_obs")
colnames(P_boot_summary_class1) = paste0(colnames(P_boot_summary_class1),
"_class1")
dim(P_boot_summary_class1)
##
qntl = apply(P_boot_class2[,2:(nboot+1)],
MARGIN = 1, FUN = function(x){quantile(x, na.rm = T, p = q)})
P_boot_summary_class2 = cbind(P_boot_class2[,1], t(qntl))
sig = apply(P_boot_summary_class2, MARGIN = 1,
FUN = function(x){sigboot(x[1],x[2],x[3])})
P_boot_summary_class2 = cbind(P_boot_summary_class2, sig)
colnames(P_boot_summary_class2)[1] = c("P_obs")
colnames(P_boot_summary_class2) = paste0(colnames(P_boot_summary_class2),
"_class2")
dim(P_boot_summary_class2)
##
qntl = apply(P_boot_mix[,2:(nboot+1)],
MARGIN = 1, FUN = function(x){quantile(x, na.rm = T, p = q)})
P_boot_summary_mix = cbind(P_boot_mix[,1], t(qntl))
sig = apply(P_boot_summary_mix, MARGIN = 1,
FUN = function(x){sigboot(x[1],x[2],x[3])})
P_boot_summary_mix = cbind(P_boot_summary_mix, sig)
colnames(P_boot_summary_mix)[1] = c("P_obs")
colnames(P_boot_summary_mix) = paste0(colnames(P_boot_summary_mix),
"_mix")
dim(P_boot_summary_mix)
P_summary_all = as.data.frame(cbind(P_boot_summary_class1,P_boot_summary_class2,P_boot_summary_mix))
View(P_summary_all)
columns_propensities = list()
columns_propensities[["class1"]] = c(1,2,3)
columns_propensities[["class2"]] = c(5,6,7)
columns_propensities[["classmix"]] = c(9,10,11)
Prop.compare = compare_propensities(P_summary_all, columns_propensities)
P_summary_all = Prop.compare$P_summary
ASV.sig.list = Prop.compare$ASV_sig
setwd(dirOut)
# --- Print some results and save
names(ASV.sig.list)
length(ASV.sig.list[["class2"]])
fileOut = "Propensities_ASVforFinalClass.tsv"
write.table(P_summary_all, file = fileOut, quote = F, sep = "\t")
# --- Individual positive significant propensities (CI does not include 0)
id.sig.class1 = which(P_summary_all$sig_class1 == 1)
length(P_summary_all$P_obs_class1[id.sig.class1] > 0)
#848 significant propensity for being observed in class 1
id.sig.class2 = which(P_summary_all$sig_class2 == 1)
length(P_summary_all$P_obs_class2[id.sig.class2] > 0)
#396 significant propensity for being observed in class 2
id.sig.classmix = which(P_summary_all$sig_mix == 1)
length(P_summary_all$P_obs_mix[id.sig.classmix] > 0)
# --- Individual positive significant propensities in more than one class
id.sig.class1_and_2 = c(id.sig.class1,id.sig.class2)
length(which(table(id.sig.class1_and_2) == 2))
# 329 significant (positive) propensity in both 1 and 2
id.sig.class1_and_mix = c(id.sig.class1,id.sig.classmix)
length(which(table(id.sig.class1_and_mix) == 2))
# 542 siginificant propensity in both 1 and mix
id.sig.class2_and_mix = c(id.sig.class2,id.sig.classmix)
length(which(table(id.sig.class2_and_mix) == 2))
# 344 significant propensity in 2 and mix
id.sig.class_all =  c(id.sig.class1,id.sig.class2,id.sig.classmix)
length(which(table(id.sig.class_all) == 3))
View(P_summary_all[id.sig.class_all, ])
# --- Individual positive significant propensities (CI does not include 0)
id.pos.sig.class1 = which(P_summary_all$sig_class1 == 1)
id.neg.sig.class1 = which(P_summary_all$sig_class1 == -1)
#848 significant propensity for being observed in class 1
id.pos.sig.class2 = which(P_summary_all$sig_class2 == 1)
id.neg.sig.class2 = which(P_summary_all$sig_class2 == -1)
#396 positive and 34 negative significant propensity for being observed in class 2
id.pos.sig.classmix = which(P_summary_all$sig_mix == 1)
#396 positive and 34 negative significant propensity for being observed in class 2
id.pos.sig.classmix = which(P_summary_all$sig_mix == 1) # 648
id.neg.sig.classmix = which(P_summary_all$sig_mix == -1) # 648
#648 positive and 1 negative significant propensity for being observed in class mix
# --- Individual positive significant propensities in more than one class
id.sig.class1_and_2 = c(id.pos.sig.class1,id.pos.sig.class2)
length(which(table(id.sig.class1_and_2) == 2))
# 329 significant (positive) propensity in both 1 and 2
id.sig.class1_and_mix = c(id.pos.sig.class1,id.pos.sig.classmix)
length(which(table(id.sig.class1_and_mix) == 2))
# 542 siginificant propensity in both 1 and mix
id.sig.class2_and_mix = c(id.pos.sig.class2,id.pos.sig.classmix)
length(which(table(id.sig.class2_and_mix) == 2))
# 344 significant propensity in 2 and mix
id.sig.class_all =  c(id.pos.sig.class1,id.pos.sig.class2,id.pos.sig.classmix)
length(which(table(id.sig.class_all) == 3))
View(P_summary_all[id.sig.class_all, ])
rm(list = ls())
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities.R", echo=TRUE)
id.sig.class1_and_2 = names(which(table(id.sig.class1_and_2) == 2))
id.sig.class1_and_mix = names(which(table(id.sig.class1_and_mix) == 2))
id.sig.class2_and_mix = names(which(table(id.sig.class2_and_mix) == 2))
id.sig.class_all = names(which(table(id.sig.class_all) == 3))
View(P_summary_all[id.sig.class_all, ])
which(table(id.sig.class_all) == 3)
length(which(table(id.sig.class_all) == 3))
# 333 significant propensity in 2 and mix
id.sig.class_all =  c(id.pos.sig.class1,id.pos.sig.class2,id.pos.sig.classmix)
which(table(id.sig.class_all) == 3)
table(id.sig.class_all)
View(table(id.sig.class_all))
id.sig.class_all = names(which(table(id.sig.class_all)$Freq == 3))
freq.class1_and_2 = as.data.frame(table(id.sig.class1_and_2))
View(freq.class1_and_2)
#648 positive and 1 negative significant propensity for being observed in class mix
# --- Individual positive significant propensities in more than one class
id.sig.class1_and_2 = c(id.pos.sig.class1,id.pos.sig.class2)
freq.class1_and_2 = as.data.frame(table(id.sig.class1_and_2))
length(which(freq.class1_and_2$Freq == 2))
id.tmp = which(freq.class1_and_2$Freq == 2)
id.tmp = which(freq.class1_and_2$Freq == 2)
id.sig.class1_and_2 = freq.class1_and_2$id.sig.class1_and_2[id.tmp]
id.sig.class1_and_2 =
as.numeric(freq.class1_and_2$id.sig.class1_and_2[id.tmp])
# 540 siginificant propensity in both 1 and mix
id.sig.class2_and_mix = c(id.pos.sig.class2,id.pos.sig.classmix)
freq.class2_and_mix = as.data.frame(table(id.sig.class2_and_mix))
id.tmp = which(freq.class2_and_mix$Freq == 2)
id.sig.class2_and_mix =
as.numeric(freq.class2_and_mix$id.sig.class2_and_mix[id.tmp])
# 321 significant (positive) propensity in both 1 and 2
id.sig.class1_and_mix = c(id.pos.sig.class1,id.pos.sig.classmix)
freq.class1_and_mix = as.data.frame(table(id.sig.class1_and_mix))
id.tmp = which(freq.class1_and_mix$Freq == 2)
id.sig.class1_and_mix =
as.numeric(freq.class1_and_mix$id.sig.class1_and_mix[id.tmp])
# 333 significant propensity in 2 and mix
id.sig.class_all =  c(id.pos.sig.class1,id.pos.sig.class2,id.pos.sig.classmix)
freq.class_all = as.data.frame(table(id.sig.class_all))
id.tmp = which(freq.class_all$Freq == 3)
id.sig.class_all =
as.numeric(freq.class_all$id.sig.class_all[id.tmp])
View(P_summary_all[id.sig.class_all, ])
# MATCH time0 ASVs to time7 --------
# --- Identify ASVs that were not resurrected
ASV_match.id = match(colnames(ASV.table.0D),colnames(ASV.table))
ASV_lost = which(is.na(ASV_match.id))
ASV_present = which(!is.na(ASV_match.id))
ASV.table.0D.freq = ASV.table.0D/rowSums(ASV.table.0D)
ASV.table.7D.freq = ASV.table/rowSums(ASV.table)
rowSums(ASV.table.0D.freq)[1:10]
ASV_lost.freq.mean = colMeans(ASV.table.0D.freq)[ASV_lost]
ASV.freq.0D.mean = colMeans(ASV.table.0D.freq)
ASV.freq.7D.mean = colMeans(ASV.table.7D.freq)
ASV.freq.0D.mean.df = data_frame(ASV.freq.0D.mean)
ASV.freq.0D.mean.df$resurrected = "Yes"
ASV.freq.0D.mean.df$resurrected[ASV_lost] = "No"
rownames(ASV.freq.0D.mean.df) = names(ASV.freq.0D.mean)
ASV.freq.0D.mean.df =
ASV.freq.0D.mean.df[order(-ASV.freq.0D.mean.df$ASV.freq.0D.mean), ]
ASV.freq.0D.mean.df$rank = seq(1,dim(ASV.freq.0D.mean.df)[1])
# ..... extract some statistics
# ....... quantiles of the frequencies
quantile(ASV.freq.0D.mean)
quantile(ASV_lost.freq.mean)
# ...... proportion of reads lost
total_reads = sum(ASV.table.0D)
total_reads_present = sum(ASV.table.0D[,ASV_present])
total_reads_lost = sum(ASV.table.0D[,ASV_lost])
(prop_lost = total_reads_lost / total_reads) # 3.62%
(prop_present = total_reads_present / total_reads) # 96.38%
# ...... Plot distribution of frequencies
plotOut = "Frequency_ASV0D_ObservedVsLost.pdf"
pdf(plotOut)
gg = ggplot(ASV.freq.0D.mean.df,
aes(x = rank, y = ASV.freq.0D.mean, color = resurrected))+
geom_point(alpha = 0.3,
position=position_jitter(height=.3, width=.3))+
geom_line()+
scale_y_log10()+
ylab("ASV mean frequency")+
theme_bw() +
theme(axis.title = element_text(size = 18),
legend.text = element_text(size = 14),
legend.title = element_text(size = 18))
gg
dev.off()
# ..... Match lost with Random Forest results
ASV_lost_ids = colnames(ASV.table.0D)[ASV_lost]
match_lost_RF = match(top.vars$x,ASV_lost_ids) # none found
ASV_present_ids = colnames(ASV.table.0D)[ASV_present]
match_present_RF = match(top.vars$x,ASV_present_ids) # none found
matched = match(top.vars$x, names(ASV.freq.0D.mean))
freq_top_RF_0D = ASV.freq.0D.mean[matched]
matched = match(top.vars$x, names(ASV.freq.7D.mean))
freq_top_RF_7D = ASV.freq.7D.mean[matched]
plot(freq_top_RF_0D, freq_top_RF_7D)
plot(freq_top_RF_0D, freq_top_RF_7D)
# ...... Match top-ranked RF with high propensities for split
matched = match(top.vars$x, ASV_sig_prop_mix)
ASV_sig_prop_mix[!is.na(matched)]
# ...... Match top-ranked RF with high propensities for split
ASV_sig_prop_mix = ASV.sig.list[[class_names[3]]]
matched = match(top.vars$x, ASV_sig_prop_mix)
ASV_sig_prop_mix[!is.na(matched)]
matched = match(ASV_sig_prop_mix, names(ASV.freq.0D.mean))
freq_highprop_0D = ASV.freq.0D.mean[matched]
freq_highprop_0D[is.na(freq_highprop_0D)] = 0
matched = match(ASV_sig_prop_mix,  names(ASV.freq.7D.mean))
freq_highprop_7D = ASV.freq.7D.mean[matched]
(freq_highprop_7D - freq_highprop_0D)
plot(freq_highprop_0D, freq_highprop_7D)
(freq_highprop_0D)
matched = match(top.vars$x, rownames(P_summary_all))
View(P_summary_all[matched, ])
("ggvenn"  %in% installed.packages())
# specifically check ggvenn
if(!("ggvenn"  %in% installed.packages())){
devtools::install_github("yanlinlin82/ggvenn")
}
660/4
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities.R", echo=TRUE)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities.R", echo=TRUE)
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities.R", echo=TRUE)
library(ggven)
exp
rm(list = ls())
# --- Input and output files
file.ASV = "seqtable_readyforanalysis.csv"
file.taxa = "taxa_wsp_readyforanalysis.csv"
file.Meta = "metadata_Time0D-7D-4M_May2022_wJSDpart_ext.csv"
file.RF = "varTop_Class-partition_ntree20000_mtry38.tsv"
# --- Directories
this.dir=strsplit(rstudioapi::getActiveDocumentContext()$path, "/src/")[[1]][1] # don't edit, just comment it if problems...
dirSrc=paste(this.dir,"/src/",sep="") # Directory where the code is
dirASV=paste(this.dir,"/6_finalfiles/",sep="") # Dir of ASV table
dirMeta=paste(this.dir,"/7.3_phyloseq/",sep="") # Dir of metadata
dirRF=paste(this.dir,"/7.6_keystone/random_forest",sep="") # Dir of output data
dirOut=paste(this.dir,"/7.6_keystone/propensities",sep="") # Dir of output data
scripts <- c("clean_ASV_table.R",
"propensities_fun.R","compare_propensities.R",
"sigboot.R","sigclass.R") # list of functions to load
packages <- c("tidyverse", "stringr", "ggplot2") # list of packages to load
# INSTALL PACKAGES & LOAD LIBRARIES -----------------
cat("INSTALLING PACKAGES & LOADING LIBRARIES... \n\n", sep = "")
n_packages <- length(packages) # count how many packages are required
new.pkg <- packages[!(packages %in% installed.packages())] # determine which packages aren't installed
# install missing packages
if(length(new.pkg)){
install.packages(new.pkg)
}
# specifically check ggvenn
if(!("ggvenn"  %in% installed.packages())){
devtools::install_github("yanlinlin82/ggvenn")
}
# load all requried libraries
setwd(dirSrc)
for(n in 1:n_packages){
cat("Loading Library #", n, " of ", n_packages, "... Currently Loading: ", packages[n], "\n", sep = "")
lib_load <- paste("library(\"",packages[n],"\")", sep = "") # create string of text for loading each library
eval(parse(text = lib_load)) # evaluate the string to load the library
}
library(ggvenn)
n_scripts <- length(scripts) # count how many packages are required
for(n in 1:n_scripts){
cat("Loading script #", n, " of ", n_scripts, "... Currently Loading: ", scripts[n], "\n", sep = "")
lib_load <- paste("source(\"",scripts[n],"\")", sep = "") # create string of text for loading each library
eval(parse(text = lib_load)) # evaluate the string to load the library
}
dir.create(dirOut)
# --- Read ASVs table
setwd(dirASV)
ASV.table.all = read.table(file = file.ASV, sep="\t")
colnames(ASV.table.all)[1:5]
rownames(ASV.table.all)[1:5]
dim(ASV.table.all)
head(ASV.table.all)[1:5,1:5]
# ..... read metadata. Samples present in metadata were those passing the filtering
setwd(dirMeta)
sample_md.all <-read.table(file = file.Meta, sep="\t", header=TRUE)
head(sample_md.all)[1:5,1:5]
# ..... read top ASVs inferred from RF
setwd(dirRF)
top.vars = read.table(file = file.RF)
# Clean data   ----------
# --- Extract a set with only time 7
exclude_exp = c("4M","0D")
clean.data.list = clean_ASV_table(ASV.table.all, sample_md.all,
match_exp = T, exclude_exp = exclude_exp)
ASV.table.7D = clean.data.list$ASV.table
sample_md.7D = clean.data.list$sample_md
# --- Another set with only time 0
exclude_exp = c("4M","7D_rep1","7D_rep2","7D_rep3","7D_rep4")
clean.data.list = clean_ASV_table(ASV.table.all, sample_md.all,
match_exp = T, exclude_exp = exclude_exp)
ASV.table.0D = clean.data.list$ASV.table
sample_md.0D = clean.data.list$sample_md
# --- Extract parents
parents.list = unique(sample_md.7D$parent)
# --- Compute the probability that each parent has of having
#     their childs in a pure (all in class 1 or 2) or mixed classification.
n_class1 = 0; class1_id = c(); parent1_id = c()
n_class2 = 0; class2_id = c(); parent2_id = c()
n_classmix = 0; classmix_id = c(); parentmix_id = c()
for(parent in parents.list){
#browser()
child_id = which(sample_md.7D$parent == parent) # extract childs
child_classes = as.character(sample_md.7D$partition[child_id]) # and their classifications
nclass = unique(child_classes) # check if unique
if(length(nclass) == 1){ # pure class
if(nclass[1] == "Class1"){ # either class 1
n_class1 = n_class1 + 1
class1_id = c(class1_id, child_id)
parent1_id = c(parent1_id, parent)
}else{                    # or class 2
n_class2 = n_class2 + 1
class2_id = c(class2_id, child_id)
parent2_id = c(parent2_id, parent)
}
}else{  # mixed classes
n_classmix = n_classmix + 1
classmix_id = c(classmix_id, child_id)
parentmix_id = c(parentmix_id, parent)
}
}
n_class_tot = n_class1 + n_class2 + n_classmix
P_class1 = n_class1 / n_class_tot
P_class2 = n_class2 / n_class_tot
P_classmix = n_classmix / n_class_tot
P_class.list = list("class1" = P_class1,
"class2" = P_class2,
"classmix" = P_classmix)
# START ANALYSIS ---------------------
experiment = c("starting","final")
P_summary_all.list = list()
ASV_sig_prop.list = list()
exp = "starting"
if(exp == "starting"){
ASV.table = ASV.table.0D
sample_md = sample_md.0D
classes_id.list = list("class1" = parent1_id,
"class2" = parent2_id,
"classmix" = parentmix_id)
}else{
ASV.table = ASV.table.7D
sample_md = sample_md.7D
classes_id.list = list("class1" = class1_id,
"class2" = class2_id,
"classmix" = classmix_id)
}
class_names = names(classes_id.list)
ASV.table.class.bin.list = list()
class = class_names[1]
class_id = classes_id.list[[class]]
# ... identify samples for each type of class/mix
samples_class = sample_md$sampleid[class_id]
# ... extract the ASV table
matched = match(samples_class, rownames(ASV.table))
samples_classs
samples_class
class_id
samples_class = class_id
# ... extract the ASV table
matched = match(samples_class, rownames(ASV.table))
ASV.table.class = ASV.table[matched, ]
# ... binarize
ASV.table.class.bin = ASV.table.class
ASV.table.class.bin[ASV.table.class.bin > 0] = 1
ASV.table.class.bin.list[[class]]=ASV.table.class.bin
ASV.table.bin = ASV.table
ASV.table.bin[ASV.table.bin > 0] = 1
ASV.table.class.bin.list[["all"]] = ASV.table.bin
class_names_ext = c(class_names, "all")
source("~/Nextcloud/Research/Projects/FunctionalGroups/Repositories/ReplayEcology/src/propensities.R", echo=TRUE)
